<OakShader>
	<Common>
		varying vec3 pos_vary; //fragment position
		varying vec3 normal_vary; //fragment normal
		varying vec3 color_vary; //fragment color
	</Common>

	<Vertex>
		attribute vec3 position; //vertex position
		attribute vec3 normal; //vertex normal
		attribute vec3 color; //vertex color
	    
		uniform mat4 matWorld, matViewProj; //world transform matrix and projection transform matrix

		void main(void) {
			//assign value to the fragment normal
			//the normal of every fragments will be rasterized from the vertices' normal
			normal_vary = (matWorld * vec4(normal, 0.0)).xyz;
	        
			//assign value to the fragment color
			//the color of every fragments will be rasterized from the vertices' color
			color_vary = color;        
	        
			//transform the vertex position to the world space
			vec4 pos_world = matWorld * vec4(position, 1.0);
	                
			//assign value to the fragment position
			//the position of every fragments will be rasterized from the vertices' position
			pos_vary = pos_world.xyz / pos_world.w;
	                
			//transform the vertex position to the post-projection space
			gl_Position = matViewProj * pos_world;
		}
	</Vertex>

	<Fragment>
		uniform vec3 lightPos; //light position
		uniform vec3 lightColor; //light color

		void main(void) {
			vec3 L = normalize(lightPos - pos_vary);
			vec3 N = normalize(normal_vary);
			float diffuse_intensity = pow(max(0.0, dot(L, N)), 3.0);
	        
			gl_FragColor = vec4(lightColor * color_vary * diffuse_intensity, 1);
		}
	</Fragment>

</OakShader>